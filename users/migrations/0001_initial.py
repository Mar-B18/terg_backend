# Generated by Django 4.2 on 2025-04-21 07:10

from django.db import migrations
from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.apps import apps

def create_roles_and_permissions(apps, schema_editor):
    # Get or create groups (roles)
    Group.objects.get_or_create(name='Admin')
    Group.objects.get_or_create(name='Auditor')
    Group.objects.get_or_create(name='Assessor')
    Group.objects.get_or_create(name='Analyst')
    Group.objects.get_or_create(name='Guest')

    # Assign permissions (example for auth.User and a custom model)
    # --- Example for auth.User permissions ---
    user_content_type = ContentType.objects.get(app_label='auth', model='user')
    user_permissions = Permission.objects.filter(content_type=user_content_type)

    # Admin: Full access to auth.User
    admin_group = Group.objects.get(name='Admin')
    admin_group.permissions.add(*user_permissions)

    # Editor: Can change and view users
    editor_group = Group.objects.get(name='Auditor')
    editor_perms = user_permissions.filter(codename__in=['change_user', 'view_user'])
    editor_group.permissions.add(*editor_perms)

    # Author: Add and view users (example)
    author_group = Group.objects.get(name='Assessor')
    author_perms = user_permissions.filter(codename__in=['add_user', 'view_user'])
    author_group.permissions.add(*author_perms)

    # Viewer: View-only access
    viewer_group = Group.objects.get(name='Analyst')
    viewer_perms = user_permissions.filter(codename='view_user')
    viewer_group.permissions.add(*viewer_perms)

    # Guest: No permissions (customize as needed)
    # guest_group = Group.objects.get(name='Guest')

    # --- Repeat for other models (e.g., a custom Post model) ---
    # post_content_type = ContentType.objects.get(app_label='your_app', model='post')
    # post_permissions = Permission.objects.filter(content_type=post_content_type)
    # admin_group.permissions.add(*post_permissions)

def reverse_roles(apps, schema_editor):
    Group.objects.filter(name__in=['Admin', 'Editor', 'Author', 'Viewer', 'Guest']).delete()

class Migration(migrations.Migration):
    dependencies = [
       
    ]
    operations = [
        migrations.RunPython(create_roles_and_permissions, reverse_roles),
    ]

    dependencies = [
    ]

    operations = [
    ]
